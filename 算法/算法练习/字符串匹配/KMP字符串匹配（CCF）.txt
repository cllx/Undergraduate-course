#include<iostream>   
#include<string>   
using namespace std;   
    
int key ;  
  
class myString   
{   
protected:   
    int size;   
    string mainstr;   
    void GetNext(string p,int next[]);   
    int KMPFind(string p,int pos,int next[]);   
public:   
    myString();   
    ~myString();   
    void SetVal(string sp);   
    int KMPFindSubstr(string p,int pos);   
};   
    
myString::myString()   
{   
    size=0;   
    mainstr="";   
}   
    
myString::~myString()   
{   
    size=0;   
    mainstr="";   
}   
    
void myString::SetVal(string sp)   
{   
    mainstr="";   
    mainstr.assign(sp);   
    size=mainstr.length();   
}   
    
int myString::KMPFindSubstr(string p,int pos)   
{   
    int L=p.length();   
    int *next=new int[L];   
    GetNext(p,next);   
    int v=-1;   
    v=KMPFind(p,pos,next);   
    delete[]next;   
    return v;   
}   
void myString::GetNext(string p,int next[])   
{   
    int i=0,j=-1;next[0]=-1;  
    while(i<p.length()-1)  
    {  
        if(j==-1||p[i]==p[j])  
        {  
            i++;  
            j++;  
            next[i]=j;  
        }  
        else j=next[j];  
    }  
}   
  
bool compare(int a,int b){  
    if(!key){  
        if(a>=65 && a<=90){  
            a+=32;  
        }  
        if(b>=65 && b<=90){  
            b+=32;  
        }  
    }  
    return a==b;  
}  
  
int myString::KMPFind(string p,int pos,int next[])   
{   
    int i=pos,j=1,k;  
    while(i<=mainstr.length()&&j<=p.length())  
    {     
        if(j==0||compare(mainstr[i-1],p[j-1]))  
        {  
            i++;  
            j++;  
        }  
        else j=next[j-1]+1;  
  
    }  
    if(j>p.length())return i-p.length();  
    else return 0;  
}  
  
int main()   
{   
    int T;   
    string _P,_F;   
    myString _M;   
    cin>>_F;   
    cin>>key;  
    cin>>T;   
    while(T--)   
    {  
        cin>>_P;  
        _M.SetVal(_P);   
        if(_M.KMPFindSubstr(_F,1)){  
            cout<<_P<<endl;  
        }  
    }   
    return 0;   
}