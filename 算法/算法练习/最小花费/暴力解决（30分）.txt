#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

typedef pair<int, int> Pii;
typedef long long LL;
const int maxn = 100000 + 5;
const int inf  = 0x3f3f3f3f;
int n, m;
int price[maxn];
vector<Pii> G[maxn];

struct node{
    int u, price, len;
    node(int u, int p, int l):u(u), price(p), len(l){}
};
vector<node> path;
bool vis[maxn];

void dfs(int s, int t){
    if(s == t){
//        for(int i = 0; i < path.size(); ++i){
//            //printf("(%d, %d, %d) ", path[i].u, path[i].price, path[i].len);
//            cout << path[i].u << " ";
//        }
//        cout << endl;

        LL ans = 0;
        int minPrice = path[0].price;;
        for(int i = 1; i < path.size(); ++i){
            if(minPrice <= path[i].price){
                ans += (LL)minPrice * path[i].len;
            }
            else{
                ans += (LL)minPrice * path[i].len;
                minPrice = path[i].price;
            }
        }

        cout << ans << endl;
        return;
    }

    vis[s] = true;
    for(int i = 0; i < G[s].size(); ++i){
        int u = G[s][i].first, p = G[s][i].second;
        if(!vis[u]){
            vis[u] = true;
            path.push_back(node(u, price[u], p));
            dfs(u, t);
        }
    }

    path.pop_back();
}

void solve(int s, int t){
    path.clear();
    memset(vis, false, sizeof(vis));
    path.push_back(node(s, price[s], inf));
    dfs(s, t);
}

int main(){
#ifdef LOCAL
freopen("data.in", "r", stdin);
#endif // LOCAL

    cin >> n >> m;
    for(int i = 1; i <= n; ++i) scanf("%d", price + i);
    for(int i = 0; i < n - 1; ++i){
        int u, v, e;
        scanf("%d %d %d", &u, &v, &e);
        G[u].push_back(Pii{v, e});
        G[v].push_back(Pii{u, e});
    }

    for(int i = 0; i < m; ++i){
        int s, t;
        scanf("%d %d", &s, &t);
        solve(s, t);
    }

    return 0;
}