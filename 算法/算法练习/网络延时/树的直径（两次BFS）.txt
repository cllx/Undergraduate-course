#include<iostream>  
#include<cstdio>  
#include<cstring>  
#include<algorithm>  
#include<vector>  
#include<stack>  
#include<queue>  
using namespace std;  
#define N 20005  
vector<int>G[N];  
int d[N];  
bool vis[N];  
queue<int>q;  
int bfs(int s,int &t){  
    memset(d,0,sizeof(d));  
    memset(vis,0,sizeof(vis));  
    t=s;  
    int ans=0;  
    q.push(s);  
    vis[s]=1;  
    while(!q.empty()){  
        int u=q.front();  
        q.pop();  
        for(int i=0;i<G[u].size();++i){  
            int v=G[u][i];  
            if(!vis[v]){  
                vis[v]=1;  
                d[v]=d[u]+1;  
                if(d[v]>ans){  
                    ans=d[v];  
                    t=v;  
                }  
                q.push(v);  
            }  
        }  
    }  
    return ans;  
}  
int main()  
{  
    int i,j,n,m,x;  
    scanf("%d%d",&n,&m);  
    for(i=2;i<=n;++i){  
        scanf("%d",&x);  
        G[x].push_back(i);  
        G[i].push_back(x);  
    }  
    for(i=1;i<=m;++i){  
        scanf("%d",&x);  
        G[x].push_back(i+n);  
        G[i+n].push_back(x);  
    }  
    int p,ans=bfs(1,p);  
    ans=max(ans,bfs(p,p));  
    printf("%d\n",ans);  
    return 0;  
}  